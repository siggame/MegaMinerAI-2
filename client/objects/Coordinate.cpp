///////////////////////////////////////////////////////////////////////////////
/// @file   Coordinate.cpp
///
/// @author Ben
/// @copyright 
//
/// @brief  Implementation of the Coordinate class
///////////////////////////////////////////////////////////////////////////////
#include "Coordinate.h"

#include <string>
#include <sstream>
using std::string;
using std::ostringstream;


///////////////////////////////////////////////////////////////////////////////
/// @brief  Default Constructor
///////////////////////////////////////////////////////////////////////////////
Coordinate::Coordinate()
{
    m_x = 0;
    m_y = 0;
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Constructor that creates a coordinate with the given x and y values
///
/// @param  X The x value of the Coordinate
/// @param  Y the y value of the Coordinate
///////////////////////////////////////////////////////////////////////////////
Coordinate::Coordinate(const int X, const int Y)
{
    m_x = X;
    m_y = Y;
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Copy Constructor
///////////////////////////////////////////////////////////////////////////////
Coordinate::Coordinate(const Coordinate& right)
{
    *this = right;
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Assignment Operator
///////////////////////////////////////////////////////////////////////////////
Coordinate& Coordinate::operator=(const Coordinate& right)
{
    m_x = right.m_x;
    m_y = right.m_y;
    return *this;
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Equivalency Operator
///
/// @param  right The Coordinate to compare to
///
/// @return True if the coordinates are the same, false otherwise
///////////////////////////////////////////////////////////////////////////////
bool Coordinate::operator==(const Coordinate& right) const
{
    return (right.m_x == m_x && right.m_y == m_y);
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Inequivalency Operator
///
/// @param  right The Coordinate to compare to
///
/// @return True if the coordinates are not the same, false otherwise
///////////////////////////////////////////////////////////////////////////////
bool Coordinate::operator!=(const Coordinate& right) const
{
   return (right.m_x != m_x || right.m_y != m_y);
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Adds two coordinates together by adding the x and y values of each
///         Coordinate
///
/// @param  right The coordinate to add with
///
/// @return The result of the addition
///////////////////////////////////////////////////////////////////////////////
Coordinate Coordinate::operator+(const Coordinate& right) const
{
    return Coordinate(right.m_x + m_x, right.m_y + m_y);
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Substracts two coordinates by subtracting the x and y values of 
///         each Coordinate.
///
/// @param right The coordinate on the right hand side of the subtraction
///
/// @return The result of the subtraction
///////////////////////////////////////////////////////////////////////////////
Coordinate Coordinate::operator-(const Coordinate& right) const
{
    return Coordinate(m_x - right.m_x, m_y - right.m_y);
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Negates the coordinate by negating the x and y values
///
/// @return The result of the negation
///////////////////////////////////////////////////////////////////////////////
Coordinate Coordinate::operator-() const
{
    return Coordinate(-m_x, -m_y);
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Returns the x value of the coordinate
///
/// @return The x value of the coordinate
///////////////////////////////////////////////////////////////////////////////
int Coordinate::x() const
{
    return m_x;
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Returns the y value of the coordinate
///
/// @return The y value of the coordinate
///////////////////////////////////////////////////////////////////////////////
int Coordinate::y() const
{
    return m_y;
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Sets the x value of the Coordinate
///
/// @param  X the new x value of the Coordinate
///////////////////////////////////////////////////////////////////////////////
void Coordinate::setX(int X)
{
    m_x = X;
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Sets the y value of the Coordinate
///
/// @param  Y the new y value of the Coordinate
///////////////////////////////////////////////////////////////////////////////
void Coordinate::setY(int Y)
{
    m_y = Y;
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Sets the x and y values of the Coordinate
///
/// @param  X The new x value of the Coordinate
/// @param  Y the new y value of the Coordinate
///////////////////////////////////////////////////////////////////////////////
void Coordinate::setLocation(int X, int Y)
{
    m_x = X;
    m_y = Y;
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Computes the manhattan distance from the calling object to calcTo
///
/// @param  calcTo the coordinate to calculate the distance to
///
/// @return Distance to that coordinate
///////////////////////////////////////////////////////////////////////////////
unsigned int Coordinate::distanceTo(const Coordinate& calcTo) const
{
    return (abs(m_x-calcTo.x())+abs(m_y-calcTo.y()));
}


///////////////////////////////////////////////////////////////////////////////
/// @brief  Converts the Coordinate into a string
///
/// @return A string representation of the Coordinate
///////////////////////////////////////////////////////////////////////////////
string Coordinate::toString()
{
    ostringstream sout;
    sout << "(" << x() << "," << y() << ")";
    return sout.str();
}
